.TH INLIMBO 1 "February 2025" "inLimbo Music Player" "User Commands"

.SH NAME
inLimbo \- Terminal-based music player with seamless playback and efficient metadata handling

.SH SYNOPSIS
.B inLimbo
[OPTIONS]

.SH DESCRIPTION
.PP
inLimbo is a TUI (Text User Interface) music player designed for minimalism and ease of use. It supports seamless playback and efficient metadata handling, allowing users to browse, search, and play songs with intuitive keyboard controls.

.SH OPTIONS
.TP
.B \-\-help
Show help information
.TP
.B \-\-version
Display version
.TP
.B \-\-clear-cache
Clear cached data
.TP
.B \-\-show-config-file
Show configuration file path
.TP
.B \-\-show-log-dir
Show log directory path
.TP
.B \-\-show-dbus-name
Show DBus service name
.TP
.B \-\-update-cache-run
Update cache file and run
.TP
.B \-\-print-song-tree
Print Song Map from directory
.TP
.B \-\-print-artists-all
Print all parsed artists
.TP
.B \-\-print-songs-by-artist
Print songs by artist
.TP
.B \-\-print-songs-by-genre-all
Print genres and song mappings
.TP
.B \-\-print-song-info
Print parsed song fields
.TP
.B \-\-socket-info
Show socket binding information
.TP
.B \-\-socket-unlink-force
Force remove socket binding

.SH CONFIGURATION
.PP
Config file location: $HOME/.config/inLimbo/config.toml

.SS Color Configuration
.TP
.B Hexadecimal format
#RRGGBB
.TP
.B TrueColors
Predefined color names supported

.SH COLORS inLimbo

.PP
Color Schema Documentation for inLimbo

This section explains the color schema used in [**inLimbo**](https://github.com/nots1dd/inLimbo), including all available colors, their respective RGB values, and how to configure them in the `config.toml` file.

.SS Overview
.PP
The inLimbo project uses a set of predefined true colors, each mapped to an `ftxui::Color::RGB` value (True Color Palette). This allows for a variety of colors to be used within the application to enhance the user interface.

.\" NOTE: inLimbo uses TRUECOLORS!!
.PP
inLimbo uses `ftxui::Color::RGB` to avoid any terminal emulator color schema messing up the colors. 
For example, if you have `pywal` or `wallust` set up with your terminal,
the colors would **NOT** work as intended with `ftxui::Color` only.

.SS How to Set Colors in `config.toml`
.PP
To set a color in the `$HOME/.config/inLimbo/config.toml` file, use the corresponding color name defined in the color enum. The color name must be set under the appropriate section in the TOML file.

For example, if you want to change the active window color to `Red`, you would include the following in your `config.toml`:

.nf
[colors]
active_win_color = "Red"
.fi

.\" NOTE: The color names are case-sensitive and should match exactly as shown in the available color list below.
.PP
The color names are case-sensitive and should match exactly as shown in the available color list below.

.SS Available Colors and Their RGB Values
.PP
Here’s a list of all available colors and their respective RGB values:

.TS
tab(@) allbox;
c c s
l l l.
Color Name @ RGB Value
Black @ RGB(0, 0, 0)
White @ RGB(255, 255, 255)
Red @ RGB(255, 0, 0)
LightRed @ RGB(255, 102, 102)
Green @ RGB(0, 255, 0)
LightGreen @ RGB(144, 238, 144)
Blue @ RGB(0, 0, 255)
LightBlue @ RGB(173, 216, 230)
Yellow @ RGB(255, 255, 0)
LightYellow @ RGB(255, 255, 153)
Cyan @ RGB(0, 255, 255)
LightCyan @ RGB(224, 255, 255)
Magenta @ RGB(255, 0, 255)
LightMagenta @ RGB(255, 153, 255)
Gray @ RGB(128, 128, 128)
LightGray @ RGB(211, 211, 211)
DarkGray @ RGB(64, 64, 64)
Orange @ RGB(255, 165, 0)
LightOrange @ RGB(255, 200, 124)
Purple @ RGB(128, 0, 128)
LightPurple @ RGB(216, 191, 216)
Pink @ RGB(255, 192, 203)
LightPink @ RGB(255, 182, 193)
Teal @ RGB(0, 128, 128)
LightTeal @ RGB(144, 224, 224)
SkyBlue @ RGB(135, 206, 235)
Coral @ RGB(255, 127, 80)
Lime @ RGB(191, 255, 0)
Lavender @ RGB(230, 230, 250)
Crimson @ RGB(220, 20, 60)
Gold @ RGB(255, 215, 0)
Indigo @ RGB(75, 0, 130)
Mint @ RGB(152, 255, 152)
Navy @ RGB(0, 0, 128)
Peach @ RGB(255, 218, 185)
Sand @ RGB(244, 164, 96)
SeaGreen @ RGB(46, 139, 87)
LightSeaGreen @ RGB(152, 255, 204)
SlateBlue @ RGB(106, 90, 205)
LightSlateBlue @ RGB(176, 196, 222)
SunsetOrange @ RGB(255, 99, 71)
Turquoise @ RGB(64, 224, 208)
LightTurquoise @ RGB(175, 238, 238)
.TE

.SS How to Use Colors in the inLimbo
.PP
Once the color is defined in the `config.toml` file, the `parseColors` function in the code will map the string to the corresponding `TrueColors::Color` enum value. The color is then used within inLimbo wherever needed.

For example, setting the `active_win_color` in the `config.toml` like this:

.nf
[colors]
active_win_color = "Blue"
.fi

This will configure inLimbo to use the color `Blue` (RGB(0, 0, 255)) for the active window color.

.SS Example of `config.toml`
.nf
[colors]
active_win_color = "Red"
.fi

This would set the `active_win_color` to red (RGB(255, 0, 0)).

.PP
By understanding the available colors and how to configure them in the `config.toml` file, you can easily customize the color scheme of your inLimbo player to suit your preferences.

.\" NOTE: Theming is fully up!
.PP
Theming is fully supported! It is quite simple—just put the hexadecimal value in the required field. 
I will make a few basic themes as an example in the future.

.SH KEYBINDINGS
.SS General Navigation
.TP
.B q
Quit application
.TP
.B Tab
Toggle between "Artists" and "Songs" panes
.TP
.B ?
Toggle help menu
.TP
.B /
Open search menu

.SS Scrolling and Selection
.TP
.B j
Scroll down
.TP
.B k
Scroll up
.TP
.B 0
Next search result
.TP
.B 9
Previous search result

.SS Playback Controls
.TP
.B Space
Toggle play/pause
.TP
.B Enter
Play selected song
.TP
.B n
Next song
.TP
.B p
Previous song
.TP
.B r
Replay current song
.TP
.B m
Toggle mute
.TP
.B w
Toggle audio devices

.SS Seeking and Volume
.TP
.B h
Seek -5 seconds
.TP
.B l
Seek +5 seconds
.TP
.B =
Increase volume
.TP
.B -
Decrease volume

.SS Queue Management
.TP
.B a
Add song to queue
.TP
.B e
Add artist's songs to queue
.TP
.B b
Play next
.TP
.B d
Remove from queue
.TP
.B 3
View queue

.SS Information and UI
.TP
.B 1
Main UI screen
.TP
.B 2, L
View lyrics
.TP
.B i
View song details

.SH FEATURES
.PP
.IP \[bu] 2
Fully configurable via config.toml
.IP \[bu]
Fast and efficient
.IP \[bu]
Minimal external dependencies
.IP \[bu]
Clean TUI experience
.IP \[bu]
Comprehensive metadata display
.IP \[bu]
Multiple audio format support
.IP \[bu]
Customizable interface
.IP \[bu]
Privacy-focused

.SH DEPENDENCIES
.PP
FFmpeg is highly recommended for testing and future features.

.SS Ubuntu
.nf
libtag1-dev
libgio-2.0-dev
libglib-2.0-dev
pkg-config
imagemagick
libx11-dev
libpng-dev
libcereal-dev
.fi

.SS Fedora
.nf
taglib-devel
glib2-devel
pkgconf
ImageMagick
libX11-devel
libpng-devel
libcereal-devel
.fi

.SS Arch Linux
.nf
taglib
glib2
pkgconf
imagemagick
libx11
libpng
cereal
.fi

.SH SOCKET
.PP
UNIX domain socket location: /tmp/inLimbo.sock

.SH SONG-MAP DESCRIPTION
The inLimbo Music Player follows a multi-step process for building and managing the song map. This involves mapping inodes to file paths, organizing metadata in a Red-Black Tree, serializing the data for future access, and displaying it to the user in the interface.

.SH HIGH-LEVEL FLOW OVERVIEW
The overall flow of acquiring and displaying the song map is as follows:

.IP
1. Inode Mapping
.IP
2. Red-Black Tree (RBT) Insertion
.IP
3. Metadata Extraction
.IP
4. Serialization
.IP
5. Song Map Construction

.SH DETAILED FLOW

.TP
.B 1. Inode Mapping with InodeFileMapper
.PP
This step involves processing directories and mapping inodes to their respective file paths. The inode and file path pairs are stored in a synchronization file for future reference. The flow is as follows:
.PP
- Process Directory: The `processDirectory` function reads each file, retrieves the inode using the `stat()` system call, and stores it.
- Add Mapping: Inodes are added to the Red-Black Tree via the `InodeFileMapper` class.

.TP
.B 2. Inode Insertion into Red-Black Tree
.PP
Once the inodes are mapped, they are inserted into a Red-Black Tree (`RedBlackTree` class) to maintain an ordered structure, which allows for efficient access and manipulation.
.PP
- Insert: Each inode is inserted into the `RedBlackTree` through the `insert()` method.
- Balancing: The tree is balanced after each insertion using the `fixInsert()` method to preserve Red-Black Tree properties such as node color and structural integrity.

.TP
.B 3. In-Order Traversal and Metadata Extraction
.PP
After populating the Red-Black Tree, the tree is traversed in an inorder fashion to extract metadata from the corresponding song files. The metadata typically includes song title, artist, album, and other relevant information. The process is as follows:
.PP
- In-Order Traversal: The `inorderHelper()` method performs the traversal of the Red-Black Tree.
- Extract Metadata: For each file, metadata is parsed using the `TagLibParser` class.
- Add Song to SongTree: The parsed data is added to the `SongTree`, which organizes the songs.

.TP
.B 4. Serialization into lib.bin
.PP
The collected metadata is serialized into a binary file (`lib.bin`) for persistent storage. This file is saved in the user's home directory (`$HOME/.config/inLimbo`).
.PP
- Serialize: The `SongTree` is serialized and written to `lib.bin`.
- Store: The serialized binary data is saved in `$HOME/.config/inLimbo/`.

.TP
.B 5. UI Parsing the Song Map
.PP
The final step involves loading the serialized song map (`lib.bin`) by the UI, parsing it, and displaying the song metadata in an interactive interface.
.PP
- Parse lib.bin: The UI loads and parses the `lib.bin` file.
- Display Metadata: The parsed metadata is displayed in the UI for the user to interact with.

.SH PERFORMANCE STATISTICS
The process of loading and parsing songs is optimized for performance, especially when using serialized data. Here are the average loading times for various operations:
.PP
.IP
.B - 12-15ms: 
Deserializing `lib.bin` as a cache file (static load of songmap).
.IP
.B - 180-200ms: 
Loading the song directory, parsing each inode, and building the song map dynamically.

.SH AUTHOR
.PP
Siddharth Karnam (nots1dd)

.SH LICENSE
.PP
GNU GPL v3

.SH WEBSITE
.PP
https://nots1dd.github.io/inLimbo/

.SH BUGS
.PP
Report bugs at: https://github.com/nots1dd/inLimbo
